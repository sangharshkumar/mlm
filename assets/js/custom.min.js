// Url to send ajax request
var process_url = base_url + "/assets/php/process";

// ######## MEMBER FROMS SUBMIT DATA START ########

// Login form
$(document).on("submit", "#login_form", function () {
  event.preventDefault();
  var current_form = $(this);

  var keeploggedin;
  if ($("input.remember_me").is(":checked")) {
    keeploggedin = 1;
  } else {
    keeploggedin = 0;
  }

  var formdata = current_form.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: formdata + "&action=login&keeploggedin=" + keeploggedin,
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (response == "Login successfull") {
        sweetalert_redirect("success", response, base_url, "replace");
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

// Forgot password form
$(document).on("submit", "#forgot_password_form", function () {
  event.preventDefault();
  $element = $(this);
  $formdata = $element.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: $formdata + "&action=forgot_password",
    beforeSend: function () {
      disable_form($element);
    },
    success: function (response) {
      if (response == "Email sending successfull") {
        sweetalert("success", response);
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      enable_form($element);
    },
  });
});

// Reset Password form
$(document).on("submit", "#reset_password_form", function () {
  event.preventDefault();
  $element = $(this);
  $formdata = $element.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: $formdata + "&token=" + token + "&action=reset_password",
    beforeSend: function () {
      disable_form($element);
    },
    success: function (response) {
      if (response == "Password reset successfull") {
        sweetalert_redirect(
          "success",
          response,
          base_url + "/member/login.php",
          "replace"
        );
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      enable_form($element);
    },
  });
});

//######## MEMBER FROMS SUBMIT DATA END ########

// Profile edit form
$(document).on("submit", "#profile_form", function () {
  event.preventDefault();
  var current_form = $(this);
  var formdata = current_form.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: formdata + "&action=edit_profile",
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (response == "Successfully updated") {
        sweetalert_redirect(
          "success",
          response,
          base_url + "/profile/",
          "replace"
        );
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("Something went wrong", response);
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

// Change password form
$(document).on("submit", "#change_password_form", function () {
  event.preventDefault();
  var current_form = $(this);
  var formdata = current_form.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: formdata + "&action=change_password",
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (response == "Password updated successfully") {
        sweetalert("success", response);
        reset_form(current_form);
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("Something went wrong", response);
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

// Add ticket form
$(document).on("submit", "#add_ticket", function () {
  event.preventDefault();
  var files = uploadfiles;
  var current_form = $(this);
  var formdata = current_form.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: formdata + "&action=add_ticket&files=" + files,
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (response == "Ticket submitted successfully") {
        sweetalert_redirect(
          "success",
          response,
          base_url + "/support/",
          "replace"
        );
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("Something went wrong", response);
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

// Add reply to ticket form
$(document).on("submit", "#add_reply_to_ticket", function () {
  event.preventDefault();
  var files = uploadfiles;
  var current_form = $(this);
  var formdata = current_form.serialize();
  var ticket_id = $(current_form).attr("ticket-id");
  $.ajax({
    url: process_url,
    method: "post",
    data:
      formdata +
      "&action=add_reply_to_ticket&files=" +
      files +
      "&ticket_id=" +
      ticket_id,
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (isHtml(response)) {
        reset_form(current_form);
        $("#tickets_container").prepend(response);
        sweetalert("success", "Replied added successfully");
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", 'Something went wrong');
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

// Close ticket
$(document).on("click", "#close_ticket_btn", function () {
  $.ajax({
    url: process_url,
    method: "post",
    data: {
      ticket_id: ticket_id,
      action: "close_ticket",
    },
    beforeSend: function () {
      $("#close_btn").attr("disabled", true).html("Please wait...").css({
        opacity: ".2",
        cursor: "not-allowed",
      });
    },
    success: function (response) {
      if (response == "Ticket closed successfully") {
        sweetalert_redirect(
          "success",
          response,
          base_url + "/support/",
          "href"
        );
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      $("#close_btn").attr("disabled", false).html("Close ticket").css({
        opacity: "1",
        cursor: "pointer",
      });
    },
  });
});

// Copy referral link to clipboard
$(document).on("click", "#copy_my_referral_link", function () {
  copyToClipboard(my_referral_link);
  sweetalert("success", "Link copied successfully");
});

// Valide pin table
$(document).on("focus input", "#pin_count", function () {
  var pin_count = $(this).val();
  var each_pin_cost = 49;
  $(this).attr("maxlength", "2");
  if (pin_count == "") {
    $(this).removeClass("is-valid").removeClass("is-invalid");
    $("#pin_price").removeClass("is-valid").removeClass("is-invalid").val("");
  } else if (pin_count > 10) {
    $(this).addClass("is-invalid");
    $(this)
      .siblings(".invalid-feedback")
      .html("Maximum pin count should be 10")
      .show();
    $("#pin_price").addClass("is-invalid").val("");
  } else {
    $(this).removeClass("is-invalid").addClass("is-valid");
    $("#pin_price").removeClass("is-invalid").addClass("is-valid");
    pin_cost = pin_count * each_pin_cost;
    $("#pin_price").val("Rs " + pin_cost);
  }
});

// Pin generate form
$(document).on("submit", "#pin_generate_form", function () {
  event.preventDefault();
  var current_form = $(this);
  $this = current_form;

  $pin_input = $this.find("input[name=pin_count]");
  $pin_count = $pin_input.val();
  $allowedchar = /^[0-9]+$/;
  if (!$pin_count.match($allowedchar)) {
    $pin_input
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html("Pin count is invalid");
  } else var formdata = current_form.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: formdata + "&action=generate_pin",
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (response == "Pin created successfully") {
        reset_form(current_form);
        sweetalert("success", response);
        setTimeout(function () {
          location.reload();
        }, 2000);
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

//  ##### REGISTARTION CODE START #######

// Validate placement id
$(document).on("keyup input", "#placement_id", function () {
  var element = $(this);
  var placement_id = element.val();
  $.ajax({
    url: process_url,
    data: {
      placement_id: placement_id,
      action: "validate_registration_form",
      condition: "placement_id",
    },
    method: "post",
    success: function (response) {
      if (!isJSON(response)) {
        $(element)
          .removeClass("is-valid")
          .addClass("is-invalid")
          .siblings(".invalid-feedback")
          .html(response);
        $("#placement_name")
          .removeClass("is-valid")
          .addClass("is-invalid")
          .val("");
        $(".select")
          .removeClass("is-valid")
          .removeClass("is-invalid")
          .siblings(".invalid-feedback")
          .html("");
        $(".select-styled").html("Select placement type");
        $(".select-options").find("li[rel=left]").removeClass("disabled");
        $(".select-options").find("li[rel=right]").removeClass("disabled");
      } else {
        res = JSON.parse(response);
        var placement_name = res.placement_name;
        var left_id = res.left_id;
        var right_id = res.right_id;

        $("#placement_name")
          .removeClass("is-invalid")
          .addClass("is-valid")
          .val(placement_name);

        $(element)
          .removeClass("is-invalid")
          .addClass("is-valid")
          .siblings(".valid-feedback")
          .html("Placement id matched");

        if (left_id != 0) {
          $(".select-options").find("li[rel=left]").addClass("disabled");
          $(".select")
            .removeClass("is-valid")
            .addClass("is-invalid")
            .siblings(".invalid-feedback")
            .html("left side is in use");
          if ($(".select-styled").html() == "Left") {
            $(".select-styled").html("Select placement type");
          }
        } else {
          $(".select-options").find("li[rel=left]").removeClass("disabled");
          $(".select").removeClass("is-invalid");
        }

        if (right_id != 0) {
          $(".select-options").find("li[rel=right]").addClass("disabled");
          $(".select")
            .removeClass("is-valid")
            .addClass("is-invalid")
            .siblings(".invalid-feedback")
            .html("left and right both is in use");
          if ($(".select-styled").html() == "Right") {
            $(".select-styled").html("Select placement type");
          }
        } else {
          $(".select-options").find("li[rel=right]").removeClass("disabled");
          $(".select").removeClass("is-invalid");
        }

        if (left_id != 0 && right_id != 0) {
          $(element)
            .removeClass("is-valid")
            .addClass("is-invalid")
            .siblings(".invalid-feedback")
            .html("left and right both is in use");
          $(".select")
            .removeClass("is-valid")
            .addClass("is-invalid")
            .siblings(".invalid-feedback")
            .html("left and right both is in use");
          $(".select-styled").html("Select placement type");
        } else {
          $(element).removeClass("is-invalid").addClass("is-valid");
          $(".select").removeClass("is-invalid");
        }
      }
    },
  });
});

// Validate referral id
$(document).on("keyup input", "#referral_id", function () {
  var element = $(this);
  var referral_id = element.val();
  $.ajax({
    url: process_url,
    data: {
      referral_id: referral_id,
      action: "validate_registration_form",
      condition: "referral_id",
    },
    method: "post",
    success: function (response) {
      if (response == "Invalid referral id") {
        $(element).removeClass("is-valid").addClass("is-invalid");
        $(element).siblings(".invalid-feedback").html(response);
        $("#referral_name").addClass("is-invalid").val("");
      } else {
        $(element).removeClass("is-invalid").addClass("is-valid");
        $(element).siblings(".valid-feedback").html("Referral id matched");
        $("#referral_name")
          .removeClass("is-invalid")
          .addClass("is-valid")
          .val(response);
      }
    },
  });
});

// Validate referral code
$(document).on("input", "#referral_code", function () {
  var element = $(this);
  var referral_code = $(this).val();
  $.ajax({
    url: process_url,
    method: "post",
    data: {
      referral_code: referral_code,
      action: "validate_registration_form",
      condition: "referral_code",
    },
    success: function (response) {
      if (response == "Referral code matched") {
        $(element).removeClass("is-invalid").addClass("is-valid");
        $(element).siblings(".valid-feedback").html(response);
      } else {
        $(element).removeClass("is-valid").addClass("is-invalid");
        $(element).siblings(".invalid-feedback").html(response);
      }
    },
  });
});

// Validate user name
$(document).on("input keypress", "#user_name", function (eve) {
  $element = $(this);
  $user_name = $element.val();

  alphanumeric_only(eve, $element);

  $.ajax({
    url: process_url,
    method: "post",
    data: {
      user_name: $user_name,
      action: "validate_registration_form",
      condition: "user_name_verify",
    },
    success: function (response) {
      if (response == "username is available") {
        if ($element.hasClass("invalid")) {
        } else if (
          $element.hasClass("is-invalid") &&
          $element.siblings(".invalid-feedback").html() == "Alphanumeric only"
        ) {
          setTimeout(function () {
            $element
              .removeClass("is-invalid")
              .addClass("is-valid")
              .siblings(".valid-feedback")
              .html(response);
          }, 1000);
        } else {
          $element
            .removeClass("is-invalid")
            .addClass("is-valid")
            .siblings(".valid-feedback")
            .html(response);
        }
      } else {
        if ($element.hasClass("invalid")) {
        } else if (
          $element.hasClass("is-invalid") &&
          $element.siblings(".invalid-feedback").html() == "Alphanumeric only"
        ) {
          setTimeout(function () {
            $element
              .removeClass("is-valid")
              .addClass("is-invalid")
              .siblings(".invalid-feedback")
              .html(response);
          }, 1000);
        } else {
          $element
            .removeClass("is-valid")
            .addClass("is-invalid")
            .siblings(".invalid-feedback")
            .html(response);
        }
      }
    },
  });
});

// Send registration otp
$(document).on("click", "#send_otp", function () {
  $this = $(this);
  $otp_input = $("input#otp");
  $email_input = $("input#email");
  $email = $email_input.val();
  $email_err_txt = "Please provide a valid email.";

  if ($email == "" || !validateEmail($email)) {
    $email_input
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html($email_err_txt);
  } else {
    $.ajax({
      url: process_url,
      method: "post",
      data: {
        email: $email,
        action: "send_registration_otp",
      },
      beforeSend: function () {
        $this.attr("disabled", true).html("Sending...");
        $email_input.attr("disabled", true);
      },
      success: function (response) {
        if (response == "Otp sending successfull") {
          sweetalert("success", "An otp has sent to your email");
          $otp_input
            .val("")
            .removeClass("is-invalid")
            .addClass("is-valid")
            .siblings(".valid-feedback")
            .html("An otp has sent to your email");
        } else {
          sweetalert("error", response);
        }
      },
      error: function () {
        sweetalert("error", "Something went wrong");
      },
      complete: function () {
        $this.prop("disabled", false).html("Resend");
        $email_input.attr("disabled", false);
      },
    });
  }
});

// Validate placement type
var placement_type;
$(document).on("click", "#registration_form button[type=submit]", function () {
  var placement_type_parent = $(".select-styled");
  placement_type = placement_type_parent.html();
  if (placement_type != "Left" && placement_type != "Right") {
    $(placement_type_parent).parent().addClass("is-invalid");
  } else {
    $(placement_type_parent).parent().removeClass("is-invalid");
  }
});

// Registration form
$(document).on("submit", "#registration_form", function () {
  event.preventDefault();
  var current_form = $(this);
  var formdata = $(current_form).serialize();
  $.ajax({
    url: process_url,
    data:
      formdata + "&placement_type=" + placement_type + "&action=registartion",
    method: "post",
    beforeSend: function () {
      disable_form(current_form);
    },
    success: function (response) {
      if (response == "Registartion successfull") {
        sweetalert_redirect(
          "success",
          response,
          base_url + "/member/new-register.php",
          "replace"
        );
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      enable_form(current_form);
    },
  });
});

//  ##### REGISTARTION CODE END #######

//  ##### BALANCE CODE START #######

// Add amount form
$(document).on("submit", "#add_amount_form", function () {
  event.preventDefault();
  $this = $(this);
  $amt_input = $this.find("input[name=amount]");
  $amt = $amt_input.val();
  $allowedchar = /^[0-9]+$/;
  if (!$amt.match($allowedchar)) {
    $amt_input
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html("Amount is invalid");
  } else {
    location.href = base_url + "/payment/paytm/redirect.php?amount=" + $amt;
    window.open(base_url + "/balance/details.php");
    reset_form($this);
  }
});

// Withdraw amount validate input
$(document).on("input keyup", "#withdraw_amount_input", function () {
  $this = $(this);
  $this.attr("maxlength", "6");
  $val = $this.val();
  if ($val == "") {
    $val = "0.00";
  }
  $charge_p = 5;
  $charge = ($val * $charge_p) / 100;
  $admin_charge = 0;
  if ($val < 100 && $val > 0) {
    $admin_charge = 10;
  }
  $rec_amt = $val - ($charge + parseInt($admin_charge));

  $val = parseFloat($val).toFixed(2);
  $charge = parseFloat($charge).toFixed(2);
  $admin_charge = parseFloat($admin_charge).toFixed(2);
  $rec_amt = parseFloat($rec_amt).toFixed(2);

  if ($rec_amt <= 0) {
    $this
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html("Amount is very less");
  } else {
    $this.removeClass("is-invalid");
  }

  $amt_pre_txt = $("#amt_pre_txt");
  $chr_pre_txt = $("#chr_pre_txt");
  $admin_chr_pre_txt = $("#admin_chr_pre_txt");
  $rec_amt_pre_txt = $("#rec_amt_pre_txt");

  $amt_pre_txt.html($val + " INR");
  $chr_pre_txt.html($charge + " INR");
  $admin_chr_pre_txt.html($admin_charge + " INR");
  $rec_amt_pre_txt.html($rec_amt + " INR");

  if ($this.val() == "") {
    $this.removeClass("is-valid").removeClass("is-invalid");
  }
});

// Withdraw amount form
$(document).on("submit", "#withdraw_amount_form", function () {
  event.preventDefault();
  $this = $(this);
  $amt_input = $this.find("input[name=amount]");
  $amt = $amt_input.val();
  $allowedchar = /^[0-9]+$/;
  if (!$amt.match($allowedchar)) {
    $amt_input
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html("Amount is invalid");
  } else {
    $.ajax({
      url: process_url,
      method: "post",
      data: {
        amount: $amt,
        action: "withdraw_money",
      },
      beforeSend: function () {
        disable_form($this);
      },
      success: function (response) {
        if (response == "Withdraw successfull") {
          reset_form($this);
          sweetalert_redirect(
            "success",
            'Payment will be deposit within 24 hours.',
            base_url + "/balance/",
            "replace"
          );
        } else {
          sweetalert("error", response);
        }
      },
      error: function () {
        sweetalert("error", "Something went wrong");
      },
      complete: function () {
        enable_form($this);
      },
    });
  }
});
//  ##### BALANCE CODE END #######

// Reset form on page load
$("form.resetonload").each(function () {
  $(this).trigger("reset");
});

// Reset form function
function reset_form(form) {
  form.trigger("reset");
  $(form).removeClass("was-validated");
}

// Off autocomplete in each input
$("input").each(function () {
  var element = $(this);
  $(document).on("focus click", function () {
    $(element).attr("autocomplete", "off");
  });
});

// Prevent to write keywords other than 0-9
$(document).on("keypress input keyup", ".numbers-only", function (eve) {
  numbers_only(eve, $(this));
});

// Prevent to write keywords other than a-zA-z
$(document).on("keypress input keyup", ".alpha-only", function (eve) {
  alpha_only(eve, $(this));
});

// Validate email
$(document).on("input", ".email-only", function () {
  $element = $(this);
  email_only($element);
  validate_otp();
});

// Validate email
$(document).on("blur", ".email-only", function () {
  $element = $(this);
  $email = $element.val();
  if ($email !== "") {
    email_only($element);
  }
});

$(document).on("keyup keypress input", "input[name=phone]", function () {
  $this = $(this);
  mobile_number_validate($this);
});

function mobile_number_validate($this) {
  $val = $this.val();


  if ($val.length < 11 || $val.length > 13) {
    $this
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html("Invalid mobile number");
  } else {
    $this
      .removeClass("is-invalid")
      .addClass("is-valid")
      .siblings(".valid-feedback");
  }
}

$(document).on(
  "keypress input keup",
  "input[name=account_number]",
  function (eve) {
    $element = $(this);
    numbers_space_only(eve, $element);
  }
);

$(document).on("keypress keyup input", "input[name=ifsc_code]", function (eve) {
  $element = $(this);
  alphanumeric_only(eve, $element);
});

// Validate password and confirm password
$(document).on("keyup input", "#confirm_password", function () {
  validate_password();
});

// Validate password and confirm password
$(document).on("keyup input", "#password", function () {
  validate_password();
});

$(document).on("keyup input", "#otp", function () {
  validate_otp();
});

function validate_otp() {
  $this = $("#otp");
  $otp = $this.val();
  $otp_length = $otp.length;
  $otp_err_text = "Please provide a valid otp";
  $email_input = $("input#email");
  $email = $email_input.val();
  $email_err_txt = "Please provide a valid email.";
  if ($otp == "") {
  } else if ($email == "" || !validateEmail($email)) {
    $email_input
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html($email_err_txt);
  } else if ($otp_length !== 5) {
    $this
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html($otp_err_text);
  } else {
    $this.removeClass("is-invalid");
    $.ajax({
      url: process_url,
      method: "post",
      data: {
        otp: $otp,
        email: $email,
        condition: "validate_otp",
        action: "validate_registration_form",
      },
      success: function ($response) {
        if ($response == "Otp valid") {
          $this
            .removeClass("is-invalid")
            .addClass("is-valid")
            .siblings(".valid-feedback")
            .html($response);
        } else {
          $this
            .removeClass("is-valid")
            .addClass("is-invalid")
            .siblings(".invalid-feedback")
            .html($otp_err_text);
        }
      },
    });
  }
}

$(document).on("keyup input", "input[name=mobile_number]", function () {
  $this = $(this);
  mobile_number_validate($this);
});

$(document).on("click", "#reset_login_form", function () {
  $("#login_form").find("input").val("");
});

// Force to write numbers only
function numbers_only(eve, $this) {
  $val = $this.val();
  $input_element = '<div class="input-feedback">Only numbers are allowed</div>';
  $enterkey = 13;
  $backkey = 8;
  $this.siblings(".input-feedback").remove();
  var ch = String.fromCharCode(event.which);
  if (!/[0-9]/.test(ch)) {
    if (eve.which == $backkey || eve.which == $enterkey) {
    } else event.returnValue = false;
    if (event.returnValue == false) {
      $this.addClass("input-invalid");
      if ($this.siblings("div.input-group-append").length == 0) {
        $this.after($input_element);
      } else {
        $this.siblings("div.input-group-append").after($input_element);
      }

      setTimeout(function () {
        $this.removeClass("input-invalid");
        $this.siblings(".input-feedback").remove();
      }, 1000);
    }
  }
  $this.val($this.val().replace(/[^0-9]/g, ""));

  if ($val == "") {
    $this.removeClass("is-valid").removeClass("is-invalid");
  }
}

// Force to write aplhabets only i.e. a-zA-Z
function alpha_only(eve, $this) {
  $val = $this.val();
  $input_element =
    '<div class="input-feedback">Only alphabets are allowed</div>';
  $enterkey = 13;
  $backkey = 8;
  $this.siblings(".input-feedback").remove();
  var ch = String.fromCharCode(event.which);
  if (!/[a-zA-Z]/.test(ch)) {
    if (eve.which == $backkey || eve.which == $enterkey) {
    } else event.returnValue = false;
    if (event.returnValue == false) {
      $this.addClass("input-invalid");
      $this.after($input_element);
      setTimeout(function () {
        $this.removeClass("input-invalid");
        $this.siblings(".input-feedback").remove();
      }, 1000);
    }
  }
  $this.val($this.val().replace(/[^a-zA-Z]/g, ""));

  if ($val == "") {
    $this.removeClass("is-valid").removeClass("is-invalid");
  }
}

// Force to write numbers space only
function numbers_space_only(eve, $this) {
  $val = $this.val();
  $input_element =
    '<div class="input-feedback">Only numbers and white space are allowed</div>';
  $enterkey = 13;
  $backkey = 8;
  $this.siblings(".input-feedback").remove();
  var ch = String.fromCharCode(event.which);
  if (!/[0-9 ]/.test(ch)) {
    if (eve.which == $backkey || eve.which == $enterkey) {
    } else event.returnValue = false;
    if (event.returnValue == false) {
      $this.addClass("input-invalid");
      $this.after($input_element);
      setTimeout(function () {
        $this.removeClass("input-invalid");
        $this.siblings(".input-feedback").remove();
      }, 1000);
    }
  }
  $this.val($this.val().replace(/[^0-9 ]/g, ""));
  if ($val == "") {
    $this.removeClass("is-valid").removeClass("is-invalid");
  }
}

// Force to write numbers space only
function alphanumeric_only(eve, $this) {
  $val = $this.val();
  $input_element =
    '<div class="input-feedback">Only numbers and alphabets are allowed</div>';
  $enterkey = 13;
  $backkey = 8;
  $this.siblings(".input-feedback").remove();
  var ch = String.fromCharCode(event.which);
  if (!/[a-zA-Z0-9]/.test(ch)) {
    if (eve.which == $backkey || eve.which == $enterkey) {
    } else event.returnValue = false;
    if (event.returnValue == false) {
      $this.addClass("input-invalid");
      $this.after($input_element);
      setTimeout(function () {
        $this.removeClass("input-invalid");
        $this.siblings(".input-feedback").remove();
      }, 1000);
    }
  }
  $this.val($this.val().replace(/[^a-zA-Z0-9]/g, ""));
  if ($val == "") {
    $this.removeClass("is-valid").removeClass("is-invalid");
  }
}

// Validate email
function email_only($element) {
  $email = $element.val();
  if (!validateEmail($email)) {
    $element
      .removeClass("is-valid")
      .addClass("is-invalid")
      .siblings(".invalid-feedback")
      .html("Invalid email format");
  } else {
    $element
      .removeClass("is-invalid")
      .addClass("is-valid")
      .siblings(".valid-feedback")
      .html("Correct email format");
  }
}

// Validate password
function validate_password() {
  var password = $("#password").val();
  var confirm_password = $("#confirm_password").val();
  if (password !== "" && confirm_password !== "") {
    if (password !== confirm_password) {
      $("#password")
        .addClass("is-invalid")
        .siblings(".invalid-feedback")
        .html("Passwords are not matching");
      $("#confirm_password")
        .addClass("is-invalid")
        .siblings(".invalid-feedback")
        .html("Passwords are not matching");
    } else {
      $("#confirm_password").removeClass("is-invalid").addClass("is-valid");
      $("#password").removeClass("is-invalid").addClass("is-valid");
    }
  } else {
    $("#confirm_password").removeClass("is-invalid").removeClass("is-valid");
    $("#password").removeClass("is-invalid").removeClass("is-valid");
  }
}

// Disable form before success of form
function disable_form(current_form) {
  $(current_form.find("input")).each(function () {
    var is_readonly = $(this).attr("readonly");
    if (typeof is_readonly !== typeof undefined && is_readonly !== false) {
    } else {
      $(this).addClass("disable").attr("readonly", true);
    }
  });

  var btn = current_form.find("button[type=submit]");
  btn.attr("disabled", true).html("Please wait...").css({
    opacity: ".2",
    cursor: "not-allowed",
  });
}

// Enable form after success
function enable_form(current_form) {
  current_form.find("input.disable").attr("readonly", false);
  var btn = current_form.find("button[type=submit]");
  btn.attr("disabled", false).html("Submit").css({
    opacity: "1",
    cursor: "pointer",
  });
}

// Check if data is html or not
function isHtml(something) {
  var $div = $("<div>").html(something);
  // if there are any children it is html
  if ($div.children().length) {
    return true;
  } else {
    return false;
  }
}

// Copy to clipboard funtion
function copyToClipboard(text) {
  var $temp = $("<input>");
  $("body").append($temp);
  $temp.val(text).select();
  document.execCommand("copy");
  $temp.remove();
}

// Change default select template to cutom select template
$("select").each(function () {
  var $this = $(this),
    numberOfOptions = $(this).children("option").length;

  $this.addClass("select-hidden");
  $this.wrap('<div class="select"></div>');
  $this.after('<div class="select-styled"></div>');

  var $styledSelect = $this.next("div.select-styled");
  $styledSelect.text($this.children("option").eq(0).text());

  var $list = $("<ul />", {
    class: "select-options",
  }).insertAfter($styledSelect);

  for (var i = 0; i < numberOfOptions; i++) {
    $("<li />", {
      text: $this.children("option").eq(i).text(),
      rel: $this.children("option").eq(i).val(),
    }).appendTo($list);
  }

  var $listItems = $list.children("li");

  $styledSelect.click(function (e) {
    e.stopPropagation();
    $("div.select-styled.active")
      .not(this)
      .each(function () {
        $(this).removeClass("active").next("ul.select-options").hide();
      });
    $(this).toggleClass("active").next("ul.select-options").toggle();
  });

  $listItems.click(function (e) {
    e.stopPropagation();
    $styledSelect.text($(this).text()).removeClass("active");
    $this.val($(this).attr("rel"));
    $list.hide();
    $(this).parent().parent().siblings(".invalid-feedback").hide();
  });

  $(document).click(function () {
    $styledSelect.removeClass("active");
    $list.hide();
  });
});

// Validate email
function validateEmail(email) {
  var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
  return regex.test(email);
}

// Check if data is Json
function isJSON(something) {
  if (typeof something != "string") something = JSON.stringify(something);

  try {
    JSON.parse(something);
    return true;
  } catch (e) {
    return false;
  }
}

// Profile Change Javascript Code Start
function remove_pop_imgupload_container() {
  $("#pop_img_upload").remove();
}

//  ##### PROFILE START #####

$(document).on("click", "#img_upload", function () {
  $.ajax({
    url: process_url,
    data: {
      action: "change_profile",
      condition: "profile_option",
    },
    method: "POST",
    beforeSend: function () {},
    success: function (response) {
      remove_pop_imgupload_container();
      $("body").append(response);
    },
    error: function () {
      sweetalert("error", "Oops! Something Went Wrong");
    },
    complete: function () {},
  });
});

$(document).on("click", "#close_pop_imgupload", function () {
  remove_pop_imgupload_container();
});

var input = $("#img_upload_input");
$(document).on("change", "#img_upload_input", function (e) {
  remove_pop_imgupload_container();
  var image = document.querySelector("#imageprev");
  var files = e.target.files;
  var done = function (url) {
    input.value = "";
    image.src = url;
    $("#myModal").modal({ backdrop: "static" });
    cropImage();
  };
  var reader;
  var file;
  var url;
  if (files && files.length > 0) {
    file = files[0];
    if (URL) {
      done(URL.createObjectURL(file));
    } else if (FileReader) {
      reader = new FileReader();
      reader.onload = function (e) {
        done(reader.result);
      };
      reader.readAsDataURL(file);
    }
  }
});

//
$("#myModal").on("hide.bs.modal", function () {
  $("#cropimage").html('<img id="imageprev" src=""/>');
});

// 2. Image Upload By Webcamera

$(document).on("click", "#spanshot", function () {
  event.preventDefault();
  take_snapshot();
});

//
function configure() {
  Webcam.set({
    width: 640,
    height: 480,
    image_format: "jpeg",
    jpeg_quality: 100,
  });
  Webcam.attach("#my_camera");
}

//
function take_snapshot() {
  Webcam.snap(function (data_uri) {
    $("#cameraModal").modal("hide");
    $("#myModal").modal({ backdrop: "static" });
    $("#cropimage").html('<img id="imageprev" src="' + data_uri + '"/>');
    cropImage();
  });
  Webcam.reset();
}

//
$("#cameraModal").on("show.bs.modal", function () {
  configure();
});

//
$("#cameraModal").on("hide.bs.modal", function () {
  Webcam.reset();
  $("#cropimage").html('<img id="imageprev" src=""/>');
});

$(document).on("click", "#camera_img", function () {
  remove_pop_imgupload_container();
});

$(document).on("click", "#edit_img", function () {
  var element = $(this);
  remove_pop_imgupload_container();
  $.ajax({
    url: process_url,
    data: {
      action: "change_profile",
      condition: "preview_profile_img",
    },
    method: "POST",
    beforeSend: function () {
      $(element)
        .find("#submit")
        .prop("disabled", true)
        .html("Please Wait...")
        .css({ cursor: "not-allowed", opacity: ".2" });
    },
    success: function (response) {
      $("#cropimage").html(response);
      $("#myModal").modal({ backdrop: "static" });
      cropImage();
    },
    complete: function () {
      $(element)
        .find("#submit")
        .prop("disabled", false)
        .html("Add a comment")
        .css({ cursor: "pointer", opacity: "1" });
    },
  });
});

$(document).on("click", "#delete_img", function () {
  remove_pop_imgupload_container();
  var element = $(this);
  $.ajax({
    url: process_url,
    method: "POST",
    data: {
      action: "change_profile",
      condition: "profile_img_delete",
    },
    beforeSend: function () {
      $(element)
        .find("#submit")
        .prop("disabled", true)
        .html("Please Wait...")
        .css({ cursor: "not-allowed", opacity: ".2" });
    },
    success: function (response) {
      $("#avatarimage").attr("src", response);
      sweetalert("success", "Profile image deleted succesfully");
    },
    error: function () {
      sweetalert("error", "Oops! Something Went Wrong");
    },
    complete: function () {
      $(element)
        .find("#submit")
        .prop("disabled", false)
        .html("Add a comment")
        .css({ cursor: "pointer", opacity: "1" });
    },
  });
});

// Image upload by drag and drop
$("#img_upload").on("mouseover", function () {
  $(this).find(".upload_container").show();
});
$("#img_upload").on("mouseout", function () {
  $(this).find(".upload_container").hide();
});

$("#img_upload").on("dragenter", function (e) {
  e.preventDefault();
});
$("#img_upload").on("dragover", function (e) {
  $(this).find(".upload_container").show();
  e.preventDefault();
});
$("#img_upload").on("dragleave", function (e) {
  $(this).find(".upload_container").hide();
});
$("#img_upload").on("drop", function (e) {
  $(this).find(".upload_container").hide();
});
var input = $("#img_upload_input");
$("#img_upload").on("drop", function (e) {
  var image = document.querySelector("#imageprev");
  var files = e.originalEvent.dataTransfer.files;
  var done = function (url) {
    input.value = "";
    image.src = url;
    $("#myModal").modal({ backdrop: "static" });
    cropImage();
  };
  var reader;
  var file;
  var url;
  if (files && files.length > 0) {
    file = files[0];
    if (URL) {
      done(URL.createObjectURL(file));
    } else if (FileReader) {
      reader = new FileReader();
      reader.onload = function (e) {
        done(reader.result);
      };
      reader.readAsDataURL(file);
    }
  }
  e.preventDefault();
});

var cropper;

function cropImage() {
  var image = document.querySelector("#imageprev");
  var minAspectRatio = 1;
  var maxAspectRatio = 1;
  cropper = new Cropper(image, {
    aspectRatio: 1,
    minCropBoxWidth: 200,
    minCropBoxHeight: 200,
    ready: function () {
      var cropper = this.cropper;
      var containerData = cropper.getContainerData();
      var cropBoxData = cropper.getCropBoxData();
      var aspectRatio = cropBoxData.width / cropBoxData.height;
      var newCropBoxWidth;
      cropper.setDragMode("move");
      if (aspectRatio < minAspectRatio || aspectRatio > maxAspectRatio) {
        newCropBoxWidth =
          cropBoxData.height * ((minAspectRatio + maxAspectRatio) / 2);
        cropper.setCropBoxData({
          left: (containerData.width - newCropBoxWidth) / 2,
          width: newCropBoxWidth,
        });
      }
    },
  });
  $("#scaleY").click(function () {
    var Yscale = cropper.imageData.scaleY;
    if (Yscale == 1) {
      cropper.scaleY(-1);
    } else {
      cropper.scaleY(1);
    }
  });
  $("#scaleX").click(function () {
    var Xscale = cropper.imageData.scaleX;
    if (Xscale == 1) {
      cropper.scaleX(-1);
    } else {
      cropper.scaleX(1);
    }
  });
  $("#rotateR").click(function () {
    cropper.rotate(45);
  });
  $("#rotateL").click(function () {
    cropper.rotate(-45);
  });
  $("#reset").click(function () {
    cropper.reset();
  });
}

$(document).on("click", "#saveAvatar", function () {
  event.preventDefault();
  var $progress = $(".progress");
  var $progressBar = $(".progress-bar");
  var avatar = document.getElementById("avatarimage");
  canvas = cropper.getCroppedCanvas({ width: 400, height: 400 });
  $progress.show();
  canvas.toBlob(function (blob) {
    var formData = new FormData();
    formData.append("avatar", blob, "avatar.jpg");
    formData.append("action", "change_profile");
    formData.append("condition", "image_upload");

    $.ajax(process_url, {
      method: "POST",
      data: formData,
      processData: false,
      contentType: false,
      xhr: function () {
        var xhr = new XMLHttpRequest();
        xhr.upload.onprogress = function (e) {
          var percent = "0";
          var percentage = "0%";
          if (e.lengthComputable) {
            percent = Math.round((e.loaded / e.total) * 100);
            percentage = percent + "%";
            $progressBar
              .width(percentage)
              .attr("aria-valuenow", percent)
              .text(percentage);
          }
        };
        return xhr;
      },
      success: function (data) {
        $("#myModal").modal("hide");
        $progress.hide();
        initialAvatarURL = avatar.src;
        avatar.src = canvas.toDataURL();
        sweetalert("success", "Profile updated successfully");
      },
      error: function () {
        avatar.src = initialAvatarURL;
        sweetalert("error", "Something Went Wrong");
      },
    });
  });
});

//  ##### PROFILE END #####

// ### SOME OTHERS FUNCTIONS START #######

$(function () {
  "use strict";
  feather.replace(),
    $(".preloader").fadeOut(),
    $(".left-sidebar").hover(
      function () {
        $(".navbar-header").addClass("expand-logo");
      },
      function () {
        $(".navbar-header").removeClass("expand-logo");
      }
    ),
    $(".nav-toggler").on("click", function () {
      $("#main-wrapper").toggleClass("show-sidebar"),
        $(".nav-toggler i").toggleClass("ti-menu"),
        $("body").trigger("resize");
    }),
    $(".nav-lock").on("click", function () {
      $("body").toggleClass("lock-nav"),
        $(".nav-lock i").toggleClass("mdi-toggle-switch-off"),
        $("body, .page-wrapper").trigger("resize");
    }),
    $(".search-box a, .search-box .app-search .srh-btn").on(
      "click",
      function () {
        $(".app-search").toggle(200), $(".app-search input").focus();
      }
    ),
    $(function () {
      $(".service-panel-toggle").on("click", function () {
        $(".customizer").toggleClass("show-service-panel");
      }),
        $(".page-wrapper").on("click", function () {
          $(".customizer").removeClass("show-service-panel");
        });
    }),
    $(".floating-labels .form-control")
      .on("focus blur", function (e) {
        $(this)
          .parents(".form-group")
          .toggleClass("focused", "focus" === e.type || 0 < this.value.length);
      })
      .trigger("blur"),
    $(function () {
      $('[data-toggle="tooltip"]').tooltip();
    }),
    $(function () {
      $('[data-toggle="popover"]').popover();
    }),
    $(".message-center, .customizer-body, .scrollable").perfectScrollbar({
      wheelPropagation: !0,
    }),
    $("body, .page-wrapper").trigger("resize"),
    $(".page-wrapper").delay(20).show(),
    $(".list-task li label").click(function () {
      $(this).toggleClass("task-done");
    }),
    $('a[data-action="collapse"]').on("click", function (e) {
      e.preventDefault(),
        $(this)
          .closest(".card")
          .find('[data-action="collapse"] i')
          .toggleClass("ti-minus ti-plus"),
        $(this).closest(".card").children(".card-body").collapse("toggle");
    }),
    $('a[data-action="expand"]').on("click", function (e) {
      e.preventDefault(),
        $(this)
          .closest(".card")
          .find('[data-action="expand"] i')
          .toggleClass("mdi-arrow-expand mdi-arrow-compress"),
        $(this).closest(".card").toggleClass("card-fullscreen");
    }),
    $('a[data-action="close"]').on("click", function () {
      $(this).closest(".card").removeClass().slideUp("fast");
    }),
    $(document).on("click", ".mega-dropdown", function (e) {
      e.stopPropagation();
    });
});

(function () {
  "use strict";
  window.addEventListener(
    "load",
    function () {
      // Fetch all the forms we want to apply custom Bootstrap validation styles to
      var forms = document.getElementsByClassName("needs-validation");
      // Loop over them and prevent submission
      var validation = Array.prototype.filter.call(forms, function (form) {
        form.addEventListener(
          "submit",
          function (event) {
            if (form.checkValidity() === false) {
              event.preventDefault();
              event.stopPropagation();
            }
            form.classList.add("was-validated");
          },
          false
        );
      });
    },
    false
  );
})();

// ### SOME OTHERS FUNCTIONS END #######


function remove_payment_img_upload(){
   $("#payment_img_upload_container").remove();
}

$(document).on("click", "#payment_img_upload", function () {
  $.ajax({
    url: process_url,
    data: {
      action: "payment_img",
      condition: "upload_option",
    },
    method: "POST",
    beforeSend: function () {},
    success: function (response) {
      remove_payment_img_upload();
      $("body").append(response);
    },
    error: function () {
      sweetalert("error", "Oops! Something Went Wrong");
    },
    complete: function () {},
  });
});

$(document).on("click", "#close_pop_imgupload", function () {
  remove_payment_img_upload();
});

var input = $("#payment_img_input");
$(document).on("change", "#payment_img_input", function (e) {
  remove_payment_img_upload();
  var image = document.querySelector("#imageprev");
  var files = e.target.files;
  var done = function (url) {
    input.value = "";
    image.src = url;
    $("#myModal").modal({ backdrop: "static" });
    cropImage();
  };
  var reader;
  var file;
  var url;
  if (files && files.length > 0) {
    file = files[0];
    if (URL) {
      done(URL.createObjectURL(file));
    } else if (FileReader) {
      reader = new FileReader();
      reader.onload = function (e) {
        done(reader.result);
      };
      reader.readAsDataURL(file);
    }
  }
});

$(document).on("click", "#savepaymentimg", function () {
  event.preventDefault();
  var $progress = $(".progress");
  var $progressBar = $(".progress-bar");
  var avatar = document.getElementById("payimage");
  canvas = cropper.getCroppedCanvas({ width: 350, height: 350 });
  $progress.show();
  canvas.toBlob(function (blob) {
    var formData = new FormData();
    formData.append("payment", blob, "payment.jpg");
    formData.append("action", "payment_img");
    formData.append("condition", "image_upload");

    $.ajax(process_url, {
      method: "POST",
      data: formData,
      processData: false,
      contentType: false,
      xhr: function () {
        var xhr = new XMLHttpRequest();
        xhr.upload.onprogress = function (e) {
          var percent = "0";
          var percentage = "0%";
          if (e.lengthComputable) {
            percent = Math.round((e.loaded / e.total) * 100);
            percentage = percent + "%";
            $progressBar
              .width(percentage)
              .attr("aria-valuenow", percent)
              .text(percentage);
          }
        };
        return xhr;
      },
      success: function (response) {
        if (response == "Image uploaded successfully"){
          $("#myModal").modal("hide");
          $progress.hide();
          initialAvatarURL = avatar.src;
          avatar.src = canvas.toDataURL();
          $("#pay_upload").hide();
          sweetalert("success", "Image upload successfully");
        }else{
          sweetalert("error",response)
        } 
      },
      error: function () {
        avatar.src = initialAvatarURL;
        sweetalert("error", "Something went wrong");
      }
    });
  });
});



$(document).on("click", "#payment_img_edit", function () {
  var element = $(this);
  remove_payment_img_upload();
  $.ajax({
    url: process_url,
    data: {
      action: "payment_img",
      condition: "preview_payment_img",
    },
    method: "POST",
    beforeSend: function () {
      $(element)
        .find("#submit")
        .prop("disabled", true)
        .html("Please Wait...")
        .css({ cursor: "not-allowed", opacity: ".2" });
    },
    success: function (response) {
      $("#cropimage").html(response);
      $("#myModal").modal({ backdrop: "static" });
      cropImage();
    },
    complete: function () {
      $(element)
        .find("#submit")
        .prop("disabled", false)
        .html("Edit")
        .css({ cursor: "pointer", opacity: "1" });
    },
  });
});

$(document).on("click", "#payment_img_del", function () {
  remove_payment_img_upload();
  var element = $(this);
  $.ajax({
    url: process_url,
    method: "POST",
    data: {
      action: "payment_img",
      condition: "payment_img_delete",
    },
    beforeSend: function () {
      $(element)
        .find("#submit")
        .prop("disabled", true)
        .html("Please Wait...")
        .css({ cursor: "not-allowed", opacity: ".2" });
    },
    success: function (response) {
      if (response == "Image deleted successfully"){
         $("#payimage").attr("src", "");
         $("#pay_upload").show();
         sweetalert("success", "Image deleted succesfully");
      }else{
        sweetalert("error",response);
      }
    },
    error: function () {
      sweetalert("error", "Oops! Something Went Wrong");
    },
    complete: function () {
      $(element)
        .find("#submit")
        .prop("disabled", false)
        .html("Delete")
        .css({ cursor: "pointer", opacity: "1" });
    },
  });
});


$(document).on("submit", "#user_payment_form",function(){
  event.preventDefault();
  $element = $(this);
  $formdata = $element.serialize();
  $.ajax({
    url: process_url,
    method: "post",
    data: $formdata + "&action=update_payment_infomation",
    beforeSend: function () {
      disable_form($element);
    },
    success: function (response) {
      if (response == "Information updated successfully") {
        sweetalert_redirect("success", response, base_url+'/profile/', "href");
      } else {
        sweetalert("error", response);
      }
    },
    error: function () {
      sweetalert("error", "Something went wrong");
    },
    complete: function () {
      enable_form($element);
    },
  });
});